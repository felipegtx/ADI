<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script type="text/javascript" src="libs/JQuery/jQuery162/jquery-1.6.2.js"></script>
</head>
<body>
    <div id="msg">
    </div>
    <script>
        var result = 0;

        if (console == undefined) {
            var console = {
                info: function (data) {
                    $("#msg").html($("#msg").html() + "<br> [" + result + "] - " + data);
                }
            };
        }

        var reading = false;
        var writing = false;
        var updgradable = false;
        var readingTries = 0;
        var writingTries = 0;
        var maxReadingTries = 3;
        var maxWritingTries = 3;

        function UsingRead(func) {
            if (!writing) {
                readingTries = 0;
                reading = true;
                var oldUpgradable = updgradable;
                updgradable = (arguments[1] != undefined) ? arguments[1] : false;
                func();
                updgradable = oldUpgradable;
                reading = false;
            }
            else if (readingTries <= maxReadingTries) {
                ++readingTries;
                UsingRead(func);
            }
            else {
                readingTries = 0;
                throw ("Couldn't acquire reading lock");
            }
        }

        function UsingWrite(func) {
            if (!writing && (updgradable || !reading)) {
                writingTries = 0;
                writing = true;
                func();
                writing = false;
            }
            else if (writingTries <= maxWritingTries) {
                ++writingTries;
                UsingWrite(func);
            }
            else {
                writingTries = 0;
                throw ("Couldn't acquire writing lock");
            }
        }

        function UsingUpgradableRead(func) {
            UsingRead(func, true);
        }

        function Sum(x, y) {
            return x + y;
        }

        var currentNode = 0;

        function DoAsyncWorker(j) {
            window.setTimeout(function () {
                var worker = new Worker("libs/Threading/WorkerTestCase.js");
                worker.onmessage = function (event) {
                    Work(j);
                }
                worker.onerror = function (a) {
                    alert("error");
                }
                worker.postMessage(j);
            }, 1 + j);
        }

        function DoAsyncLoad(j) {
            console.info("starting... " + currentNode);
            var xhr = new XMLHttpRequest();
            var that = xhr;
            xhr.onreadystatechange = function (a, b, c) {
                if (that.readyState == 4) {
                    if (that.status == 200 || that.status == 0) {
                        console.info("Evaluating... " + ++currentNode);
                        eval(that.responseText);
                        console.info("Done... " + currentNode);
                    }
                }
                else {
                    //                    alert(xhr.readyState + " - " + xhr.status);
                }
            }
            xhr.open("GET", "libs/Threading/LoadTestCase.js", true);
            xhr.send(null);
            //$.ajax("libs/Threading/LoadTestCase.js", {
            //    dataType: "script",
            //    complete: function (data, status) {
            //        console.info("Runned:" + currentNode);
            //    },
            //    error: function (jqXHR, textStatus, errorThrown) {
            //        alert("Could not load \nError:" + errorThrown);
            //    }
            //});
            console.info("Done... " + currentNode);
        }


        DoAsyncLoad(2);
        DoAsyncLoad(1);
        DoAsyncLoad(1);
        DoAsyncLoad(1);
        DoAsyncLoad(1);
        DoAsyncLoad(1);

    </script>
</body>
</html>
